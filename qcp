#!/usr/bin/perl
##############################################################################  
#
#  QCPv2 -- Quick Quake Network Copy :)
#  2005-2014 (c) Vladi Belperchinov-Shabanski "Cade" 
#  <cade@cpan.org> <cade@bis.bg> <cade@biscom.net> <cade@datamax.bg>
#  v 3.0 2014/01/03
#  v 2.1 2013/12/29
#  v 2.0 2013/11/23
#  v 1.9 2005/02/04
#
#  quick quake network copy :) 
#  this is inspired by ncp -- http://www.fefe.de/ncp/ but implemented in Perl
#
#  goal is to copy files over the net without passwords, host addresses, etc.
#  usage:
#
#  server side:  qcp files...
#  client side:  qcp
# 
#  i.e. server side or the point where you want to copy files from needs to run
#  qcp with all arguments representing files which should be copied. the client
#  side has no arguments. both sides will try to find each other automatically.
#
#
#  THIS FILE IS DISTRIBUTED UNDER GNU GPL LICENSE
#
##############################################################################
use strict;
use IO::Socket::INET;
use IO::Select;
#use Data::Dumper;

my ( $me ) = $0 =~ /([^\/]+)$/g;

our $QCP_REV       = "3.0";

our $ANNO_PORT     = 28701; # announce port
our $DATA_PORT_LO  = 28710;
our $DATA_PORT_HI  = 28790;

our $PEER_WAIT     = 60; # wait for peer to connect, in seconds ...
our $BUFSIZE       = 64*1024;

our %PEERS         = ( '255.255.255.255' => 1 );
our %BROADCAST_OPT = ( '0.0.0.0'         => 1, 
                       '255.255.255.255' => 1 ); # only 2 really

# this is more complex than it should but qcp may evolve in the future :)
our %MODE = (
            'push' => \&mode_push,
            'pull' => \&mode_pull,
            );

our $MODE;
our $CYPHER;

our $CFG_DIR       = $ENV{ 'HOME' } . "/.qcp";
mkdir( $CFG_DIR, 0700 ) unless -d $CFG_DIR;
-d $CFG_DIR or print "warning: config directory $CFG_DIR does not exist\n";

$| = 1;

### help #####################################################################

our $HELP = '
usage: qcp [options] files...

sending files (server side) needs to specify files and/or directories:    
  qcp file1 dir1 file2 ...

receiving files (client side) needs no arguments at all:
  qcp

by default qcp will try to auto-discover both peers (server and client side)

options:
  -a host       -- add peer host to the peers list (optional subnet broadcast)
  -e host:port  -- connect to this peer host address, no broadcast!
  -l port       -- switches to listen side, regardless mode
  -s            -- force server mode (regardless file arguments)
  -c            -- force client mode (regardless file arguments)
  -w seconds    -- sets timeout wait in seconds for all operations
  -p p1:p2:p3   -- sets announce port (p1) and data port range (p2..p3)
                   default are: announce 28701, data range 28710..28790  
  -s <password> -- use symmetric CBC cryptography with "password"
  -s ask        -- same as above, but will ask for password interactively
  -S <cypher>   -- use cypher for encryption (i.e. perl Crypt::CBC cypher)
  -z            -- use compression
  -v            -- print version info
  --            -- end of options, arguments after "--" are files

notes:
  * any argument starting with dash "-" is considered an option
  * qcp tries to find peers by broadcasting
  * if qcp cannot find the peer, -a should be used
  * only the one side (sender or receiver) needs -a
  * -p does not broadcast! it will accept only specified host
  * qcp remembers peers so -a is required just the first time
  * if both -l and -e are specified, last one will be used
  * by default the server side is listening for connections, however you
    can change this by using -e and -l. both -e and -l can be used either
    on server or on client sides.

credits:
  QCP is short for Quick Quake Network Copy :)
  QCP is inspired by ncp (http://www.fefe.de/ncp/) but implemented in Perl
  2005-2013 (c) Vladi Belperchinov-Shabanski "Cade"
                <cade@bis.bg> <cade@cpan.org> <cade@datamax.bg>
';

our $VER = "qcp v$QCP_REV\n";

### opts #####################################################################

my $opt_listen;
my $opt_connect_to;
my $opt_crypto;
my $opt_crypto_pass;
my $opt_crypto_cypher;
my $opt_compress;

our @args;
while( $_ = shift @ARGV )
  {
  if( /^--+$/io )
    {
    push @args, @ARGV;
    last;
    }
  if( /^-a/io )
    {
    $PEERS{ shift() }++;
    next;
    }
  if( /^-e/io )
    {
    $opt_connect_to = shift();
    next;
    }
  if( /^-l/io )
    {
    $opt_listen = shift();
    next;
    }
  if( /^-s/o )
    {
    $opt_crypto = 1;
    $opt_crypto_pass = shift();
    next;
    }
  if( /^-S/o )
    {
    $opt_crypto_cypher = shift();
    $opt_crypto_cypher = "Crypt::$opt_crypto_cypher" unless $opt_crypto_cypher =~ /^Crypt::/;
    next;
    }
  if( /^-z/o )
    {
    $opt_compress = 1;
    next;
    }
  if( /^-w/io )
    {
    $PEER_WAIT = shift;
    $PEER_WAIT = 60 if $PEER_WAIT < 1;
    next;
    }
  if( /^-p/io )
    {
    my $p = shift;
    $p =~ /(\d*)(:(\d*)(:(\d*))?)?/;
    $ANNO_PORT     = $1 || 28701; # announce port
    $DATA_PORT_LO  = $3 || 28710;
    $DATA_PORT_HI  = $5 || $3 || 28790;
    ( $DATA_PORT_LO, $DATA_PORT_HI ) = ( $DATA_PORT_HI, $DATA_PORT_LO ) if $DATA_PORT_LO > $DATA_PORT_HI;
    die "announce port ($ANNO_PORT) must not be in the data range ($DATA_PORT_LO..$DATA_PORT_HI)\n" if $DATA_PORT_LO <= $ANNO_PORT and $ANNO_PORT <= $DATA_PORT_HI;
    print "using ports: announce: $ANNO_PORT, data: $DATA_PORT_LO..$DATA_PORT_HI\n";
    next;
    }
  if( /^-s/io )
    {
    $MODE = 'push';
    next;
    }
  if( /^-c/io )
    {
    $MODE = 'pull';
    next;
    }
  if( /^(--?h(elp)?|help)$/io )
    {
    print $HELP;
    exit;
    }
  if( /^(--?v(ersion|er)?|version)$/io )
    {
    print $VER;
    exit;
    }
  push @args, $_;
  }

my $peers = load_hash( "$CFG_DIR/peers" );
%PEERS = ( %PEERS, %$peers ) if $peers;
            
$MODE ||= @args ? 'push' : 'pull';

my $mr = $MODE{ $MODE };

die "no such mode '$MODE'\n" unless $mr;

if( $opt_crypto )
  {
  if( uc( $opt_crypto_pass ) eq 'ASK' )
    {
    eval
      {
      require Term::ReadKey;
      };
    if( $@ )
      {
      print STDERR "warning: Term::ReadKey is not available, password will be visible!\n";
      print STDERR "enter transport password: ";
      $opt_crypto_pass = <STDIN>;
      }
    else
      {
      print STDERR "enter transport password: ";
      Term::ReadKey::ReadMode( 'noecho' );
      $opt_crypto_pass = Term::ReadKey::ReadLine(0);
      Term::ReadKey::ReadMode( 'restore' );
      print STDERR "\n";
      }
    }
  chomp( $opt_crypto_pass );
  die "error: empty password is not allowed\n" unless length( $opt_crypto_pass ) > 0;
  
  eval
    {
    require Crypt::CBC;
    };
  if( $@ )  
    {
    die "error: Crypt::CBC is not available, cryptography disabled\n";
    }
  my @cyphers = $opt_crypto_cypher ? ( $opt_crypto_cypher ) : qw( Crypt::Twofish2 Crypt::Twofish Crypt::Rijndael );
  for my $cypher ( @cyphers )
    {
    eval
      {
      # print "status: trying cypher: $cypher\n";
      $CYPHER = Crypt::CBC->new( -cipher => $cypher, -key => $opt_crypto_pass, );
      };
    if( ! $@ )
      {
      print "status: cypher used: $cypher\n";
      last;
      }
    }
  die "error: Crypt::CBC or Crypt::* cyphers are not available, cryptography disabled\n" unless $CYPHER;  
  }  

$mr->();

save_hash( "$CFG_DIR/peers", \%PEERS );

##############################################################################

sub mode_push
{
  my $argc = @args;
  my $argc_s = $argc > 1 ? 'items' : 'item';
  print "server mode, offering $argc $argc_s: ";
  
  my $peer_sock;
  if( $opt_listen )
    {
    $peer_sock = listen_socket( $opt_listen );
    }
  elsif( $opt_connect_to )
    {
    $peer_sock = connect_to_socket( $opt_connect_to );
    }
  else
    {    
    $peer_sock = server_announce();
    }
  return unless $peer_sock;

  for( @args )
    {
    $_ = /'/ ? "\"$_\"" : "\'$_\'" # '
    }
  my $args = join ' ', @args;
  my $z = 'z' if $opt_compress;  
  
  my $start = time();
  my $bytes = 0;
  if( $CYPHER )
    {
    $CYPHER->start( 'encrypting' );
    }
  open( my $i, "tar c${z}vvf - $args |" ) or die "source data open error: $@\n";
  while(4)
    {
    my $res = $i->read( $_, $BUFSIZE );
    last unless $res;
    if( $CYPHER )
      {
      $_ = $CYPHER->crypt( $_ );
      }
    $bytes += $res;
    $peer_sock->print( $_ );
    }
  close( $i );
  if( $CYPHER )
    {
    $CYPHER->finish();
    }
  report_stats( $start, $bytes );
}

sub mode_pull
{
  print "client mode: ";

  my $peer_sock;
  if( $opt_listen )
    {
    $peer_sock = listen_socket( $opt_listen );
    }
  elsif( $opt_connect_to )
    {
    $peer_sock = connect_to_socket( $opt_connect_to );
    }
  else
    {    
    $peer_sock = client_find_server();
    }
  return unless $peer_sock;

  my $z = 'z' if $opt_compress;  

  my $start = time();
  my $bytes = 0;
  if( $CYPHER )
    {
    $CYPHER->start( 'decrypting' );
    }
  open( my $o, "| tar x${z}pvvf -" ) or die "target data open error: $@\n";
  while(4)
    {
    my $res = $peer_sock->read( $_, $BUFSIZE );
    last unless $res;
    if( $CYPHER )
      {
      $_ = $CYPHER->crypt( $_ );
      }
    $bytes += $res;
    $o->print( $_ );
    }
  close( $o );
  if( $CYPHER )
    {
    $CYPHER->finish();
    }
  report_stats( $start, $bytes );
}

##############################################################################

sub report_stats
{
  my $start = shift;
  my $bytes = shift;
  
  my $time = time() - $start;
  
  my $speed = $time > 0 ? int( $bytes / $time ) : $bytes;
  
  $speed = num_fmt( $speed );
  $bytes = num_fmt( $bytes );
  $time  = num_fmt( $time  );
  
  print "$bytes bytes in $time seconds, $speed bps\n";
}

sub num_fmt
{
  my $data = shift;
  $data = reverse $data;
  $data =~ s/(\d\d\d)/$1'/g;
  $data =~ s/'$//;
  $data = reverse $data;
  return $data;
}

sub server_announce
{
  my $pcnt = $DATA_PORT_HI - $DATA_PORT_LO + 1;
  my $pcc  = $DATA_PORT_LO + int(rand($pcnt));

  my $server_sock;
  while( $pcnt-- )
    {
    $server_sock = IO::Socket::INET->new( 
                                          LocalPort => $pcc,
                                          Proto     => 'tcp',
                                          Listen    => 5,
                                          Timeout   => 1,
                                          ReuseAddr => 1 
                                        );
    die "listen: socket error: $@\n" if ! $server_sock and ! $!{EADDRINUSE};
    last if $server_sock;
    $pcc++;
    $pcc = $DATA_PORT_LO if $pcc > $DATA_PORT_HI;
    }

  die "listen: no available ports in the range $DATA_PORT_LO..$DATA_PORT_HI\n" unless $server_sock;

  print "announcing data port $pcc...";
  
  my $sock;
  my $wait = $PEER_WAIT;
  while( $wait-- )
    {
    ping_peer( $_, "QCP_REV=$QCP_REV:PORT=$pcc" ) for keys %PEERS;
    $sock = $server_sock->accept();
    last if $sock;
    print ".";
    }
  if( ! $sock )
    {
    die "timeout\n";
    }
  
  my $peer_host = $sock->peerhost();
  print "connected from: $peer_host\n";

  return $sock;
}

sub ping_peer
{
  my $remote_host = shift;
  my $msg         = shift;

  my $sock = IO::Socket::INET->new( PeerPort  => $ANNO_PORT,
                                    PeerAddr  => $remote_host,
                                    Proto     => 'udp',
                                    Broadcast => ( $BROADCAST_OPT{ $remote_host } || 0 ), 
                                    ) 
                                  or die "ping peer socket error: $@\n";
  $sock->send( $msg );
  return;
}

sub client_find_server
{
  my $lsock = IO::Socket::INET->new( 
                                     LocalPort => $ANNO_PORT,
                                     LocalAddr => '0.0.0.0',
                                     Proto     => 'udp',
                                     Broadcast => 1,
                                   ) 
                                  or die "find listen socket error: $@\n";
                                  
  my $select = IO::Select->new();
  my $peer_host;
  my $peer_port;

  $select->add( $lsock );
  
  my $wait = $PEER_WAIT;
  print "searching peer...";
  while( $wait-- )
    {
    my $msg;
    if( ! $select->can_read( 1 ) )
      {
      print ".";
      sleep 1;
      next;
      }
    $lsock->recv( $msg, 128, 0 );
    $peer_host = $lsock->peerhost();
    print "\npeer found at $peer_host ($msg)\n";
    $PEERS{ $peer_host }++;
    
    my %msg = map { split /=/ } split /:/, $msg;
    # print Dumper( 'parsed message', \%msg );
    
    $peer_port = $msg{ 'PORT' };
    last;
    }

  if( ! $peer_host or ! $peer_port )
    {
    die "not enough info to connect [$peer_host:$peer_port]\n";
    }
    
  print "connecting to $peer_host:$peer_port\n";
  my $peer_sock = IO::Socket::INET->new( PeerPort  => $peer_port,
                                         PeerAddr  => $peer_host,
                                         Proto     => 'tcp',
                                         Timeout   => $PEER_WAIT, );
                                         
  die "connection error: $!\n" unless $peer_sock;
                                         
  return $peer_sock;  
}

sub listen_socket
{
  my $listen_port = shift;

  my $server_sock = IO::Socket::INET->new( 
                                          LocalPort => $listen_port,
                                          Proto     => 'tcp',
                                          Listen    => 5,
                                          Timeout   => 1,
                                          ReuseAddr => 1 
                                        );
  die "listen: socket error: $@\n" if ! $server_sock and ! $!{EADDRINUSE};
  
  my $sock;
  my $wait = $PEER_WAIT;
  while( $wait-- )
    {
    $sock = $server_sock->accept();
    last if $sock;
    print ".";
    }
  if( ! $sock )
    {
    die "timeout\n";
    }
  
  my $peer_host = $sock->peerhost();
  print "connected from: $peer_host\n";

  return $sock;
}

sub connect_to_socket
{
  my $connect_to = shift();

  $connect_to .= ":$DATA_PORT_LO" unless $connect_to =~ /:\d+$/;
  
  my $peer_sock;
  
  my $wait = $PEER_WAIT;
  print "searching peer...";
  while( $wait-- )
    {
    $peer_sock = IO::Socket::INET->new( PeerAddr  => $connect_to,
                                        Proto     => 'tcp',
                                        Timeout   => 1, );
    last if $peer_sock;
    sleep(1);                                    
    print ".";
    }                                    
                                         
  die "connection error: $!\n" unless $peer_sock;
                                         
  return $peer_sock;  
}

### utilities ################################################################

sub load_file
{
  my $file = shift;
  open( my $i, $file ) or return undef;
  local $/ = undef;
  my $s = <$i>;
  close $i;
  return $s;
}

sub save_file
{
  my $file = shift;
  open( my $o, ">$file" ) or return undef;
  print $o @_;
  close( $o );
  return 1;
}

sub load_hash
{
  my $file = shift;
  my %opt = @_;
  my %h;
  for( split( /[\n\r]+/, load_file( $file ) ) )
    {
    next unless /(.+?)(?<!\\)=(.*)/;
    my $k = $1;
    my $v = $2;
    $k =~ s/\\(.)/$1/go;
    $v =~ s/\\(.)/$1/go;
    $k = uc $k if $opt{ 'KEY_UC' };
    $k = lc $k if $opt{ 'KEY_LC' };
    $v = uc $v if $opt{ 'VAL_UC' };
    $v = lc $v if $opt{ 'VAL_LC' };
    $h{ $k } = $v;
    }
  return \%h;  
}

sub save_hash
{
  my $file = shift;
  my $hr = shift;
  open( my $o, ">$file" ) or return undef;
  while( my ( $k, $v ) = each %$hr )
    {
    $k =~ s/=/\\=/g;
    print $o "$k=$v\n";
    }
  close( $o );
  return 1;
}

### eof ######################################################################

